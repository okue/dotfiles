[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'ryanoasis/vim-devicons'
hook_add = '''
let g:WebDevIconsUnicodeDecorateFolderNodes = 1
'''

[[plugins]]
repo = 'scrooloose/nerdtree'

[[plugins]]
repo = 'jistr/vim-nerdtree-tabs'
hook_add = '''
map \e <plug>NERDTreeTabsToggle<CR>
let g:nerdtree_tabs_autoclose = 1
let g:NERDTreeShowHidden=1
'''

[[plugins]]
repo = 'Xuyuanp/nerdtree-git-plugin'
hook_add = '''
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }
'''

[[plugins]]
repo = 'tyru/caw.vim'
hook_add = '''
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)
nmap <Leader>, <Plug>(caw:zeropos:toggle)
vmap <Leader>, <Plug>(caw:zeropos:toggle)
'''

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'w0rp/ale'
hook_add = '''
" linterのタイミング
let g:ale_lint_on_text_changed = 'never'
let g:ale_lint_on_insert_leave = 0
let g:ale_lint_on_enter = 0

let g:ale_sign_error   = "\ue20d"
let g:ale_sign_warning = "\uf41b"
let g:ale_echo_msg_error_str   = 'Error'
let g:ale_echo_msg_warning_str = 'Warning'
let g:ale_echo_msg_format = '[%linter%: %severity%] %s'
let g:ale_sign_column_always = 1

" 一覧表示おおび窓のサイズ
let g:ale_open_list = 1
let g:ale_list_window_size = 3

" close window automatically
augroup CloseLoclistWindowGroup
  autocmd!
  autocmd QuitPre * if empty(&buftype) | lclose | endif
augroup END

" move by ctrl+j, k
nmap <silent> <C-j> <Plug>(ale_next_wrap)
nmap <silent> <C-k> <Plug>(ale_previous_wrap)

highlight ALEErrorSign   ctermfg=9   " ctermbg=15
highlight ALEWarningSign ctermfg=227 " ctermbg=15

let g:ale_fix_on_save = 1

nnoremap <Leader>g :ALEGoToDefinitionInTab<CR>
nnoremap <Leader>r :ALEFindReferences<CR>
nnoremap <Leader>h :ALEHover<CR>

let g:ale_linters = {
    \ 'haskell': [ 'hlint' ],
    \ 'c'      : [ 'gcc' ],
    \ 'cpp'    : [ 'gcc' ],
    \ 'python' : [ 'pyls' ],
    \ }
'''

[[plugins]]
repo = 'itchyny/lightline.vim'

[[plugins]]
repo = 'maximbaz/lightline-ale'
hook_add = '''
" lightlineを読み込んでから実行してほしいので, lightlineの設定もここに書いてる
let g:lightline = { 'colorscheme': 'molokai' }

" 要) Cica.ttf https://miiton.github.io/Cica/ 
" separators for status line, tabline
let g:lightline.separator    = {'left': "\ue0c0", 'right': "\ue0c2"}
let g:lightline.subseparator = {'left': "\ue0c1", 'right': "\ue0c3"}

let g:lightline#ale#indicator_errors   = "\ue20d"
let g:lightline#ale#indicator_warnings = "\uf41b"
let g:lightline#ale#indicator_ok       = "ok \uf42e"
let g:lightline.component_expand = {
      \  'linter_checking': 'lightline#ale#checking',
      \  'linter_warnings': 'lightline#ale#warnings',
      \  'linter_errors':   'lightline#ale#errors',
      \  'linter_ok':       'lightline#ale#ok',
      \ }
let g:lightline.component_type = {
      \  'linter_checking': 'one',
      \  'linter_warnings': 'warning',
      \  'linter_errors':   'error',
      \  'linter_ok':       'left',
      \ }
let g:lightline.active = {
      \   'right': [ [ 'lineinfo' ],
      \              [ 'percent' ],
      \              [ 'fileformat', 'fileencoding', 'filetype' ],
      \              [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ] ] }
'''

[[plugins]]
repo = 'roxma/nvim-yarp'

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = '''
let g:deoplete#enable_at_startup = 1
inoremap <expr><TAB>    pumvisible() ? "\<C-n>" : "\<TAB>"
inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<S-TAB>"
'''
